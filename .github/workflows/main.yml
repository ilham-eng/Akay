name: Build HTML5 Game
on: [push]
jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js (tanpa cache)
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        # TIDAK pakai cache: 'npm'
    
    - name: Install Cordova
      run: npm install -g cordova
    
    - name: Create Canvas Game
      run: |
        cordova create mygame com.example.mygame "My Game"
        cd mygame
        
        # Buat game HTML5 Canvas sederhana
        cat > www/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
            <title>My Mobile Game</title>
            <style>
                * { margin: 0; padding: 0; }
                body { background: #000; overflow: hidden; }
                canvas { display: block; margin: 0 auto; background: #001122; }
            </style>
        </head>
        <body>
            <canvas id="gameCanvas"></canvas>
            <script>
                // Game variables
                const canvas = document.getElementById('gameCanvas');
                const ctx = canvas.getContext('2d');
                
                // Set canvas size
                canvas.width = window.innerWidth;
                canvas.height = window.innerHeight;
                
                // Player
                const player = {
                    x: canvas.width / 2 - 25,
                    y: canvas.height - 60,
                    width: 50,
                    height: 50,
                    speed: 8,
                    color: '#00ff00'
                };
                
                // Enemies
                let enemies = [];
                let score = 0;
                let gameOver = false;
                
                // Create enemy
                function createEnemy() {
                    enemies.push({
                        x: Math.random() * (canvas.width - 30),
                        y: -30,
                        width: 30,
                        height: 30,
                        speed: 3 + Math.random() * 2,
                        color: '#ff0000'
                    });
                }
                
                // Draw player
                function drawPlayer() {
                    ctx.fillStyle = player.color;
                    ctx.fillRect(player.x, player.y, player.width, player.height);
                    
                    // Player eyes
                    ctx.fillStyle = '#ffffff';
                    ctx.fillRect(player.x + 10, player.y + 10, 8, 8);
                    ctx.fillRect(player.x + 32, player.y + 10, 8, 8);
                }
                
                // Draw enemies
                function drawEnemies() {
                    enemies.forEach(enemy => {
                        ctx.fillStyle = enemy.color;
                        ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height);
                    });
                }
                
                // Update game
                function update() {
                    if (gameOver) return;
                    
                    // Move enemies
                    enemies.forEach((enemy, index) => {
                        enemy.y += enemy.speed;
                        
                        // Collision detection
                        if (enemy.y + enemy.height > player.y &&
                            enemy.x < player.x + player.width &&
                            enemy.x + enemy.width > player.x) {
                            gameOver = true;
                        }
                        
                        // Remove off-screen enemies
                        if (enemy.y > canvas.height) {
                            enemies.splice(index, 1);
                            score += 10;
                        }
                    });
                    
                    // Create new enemies
                    if (Math.random() < 0.02) {
                        createEnemy();
                    }
                }
                
                // Draw game
                function draw() {
                    // Clear canvas
                    ctx.fillStyle = '#001122';
                    ctx.fillRect(0, 0, canvas.width, canvas.height);
                    
                    drawEnemies();
                    drawPlayer();
                    
                    // Draw score
                    ctx.fillStyle = '#ffffff';
                    ctx.font = '20px Arial';
                    ctx.fillText('Score: ' + score, 10, 30);
                    
                    // Game over screen
                    if (gameOver) {
                        ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
                        ctx.fillRect(0, 0, canvas.width, canvas.height);
                        
                        ctx.fillStyle = '#ffffff';
                        ctx.font = '40px Arial';
                        ctx.textAlign = 'center';
                        ctx.fillText('GAME OVER', canvas.width / 2, canvas.height / 2 - 20);
                        
                        ctx.font = '24px Arial';
                        ctx.fillText('Final Score: ' + score, canvas.width / 2, canvas.height / 2 + 30);
                        ctx.fillText('Tap to restart', canvas.width / 2, canvas.height / 2 + 80);
                    }
                }
                
                // Game loop
                function gameLoop() {
                    update();
                    draw();
                    requestAnimationFrame(gameLoop);
                }
                
                // Touch controls
                canvas.addEventListener('touchmove', function(e) {
                    e.preventDefault();
                    if (gameOver) return;
                    
                    const touch = e.touches[0];
                    const rect = canvas.getBoundingClientRect();
                    player.x = touch.clientX - rect.left - player.width / 2;
                    
                    // Keep player in bounds
                    if (player.x < 0) player.x = 0;
                    if (player.x + player.width > canvas.width) player.x = canvas.width - player.width;
                });
                
                // Restart game on tap
                canvas.addEventListener('touchstart', function(e) {
                    if (gameOver) {
                        enemies = [];
                        score = 0;
                        gameOver = false;
                        player.x = canvas.width / 2 - 25;
                    }
                });
                
                // Keyboard controls (for testing)
                document.addEventListener('keydown', function(e) {
                    if (gameOver) {
                        enemies = [];
                        score = 0;
                        gameOver = false;
                        player.x = canvas.width / 2 - 25;
                        return;
                    }
                    
                    if (e.key === 'ArrowLeft' && player.x > 0) {
                        player.x -= player.speed;
                    }
                    if (e.key === 'ArrowRight' && player.x + player.width < canvas.width) {
                        player.x += player.speed;
                    }
                });
                
                // Start game
                gameLoop();
                
                // Handle resize
                window.addEventListener('resize', function() {
                    canvas.width = window.innerWidth;
                    canvas.height = window.innerHeight;
                    player.x = canvas.width / 2 - 25;
                    player.y = canvas.height - 60;
                });
            </script>
        </body>
        </html>
        EOF
        
        cordova platform add android
    
    - name: Build Game APK
      run: |
        cd mygame
        cordova build android --debug
        echo "âœ… Game built successfully!"
        find . -name "*.apk" -type f
    
    - name: Upload Game APK
      uses: actions/upload-artifact@v4
      with:
        name: html5-game
        path: mygame/platforms/android/app/build/outputs/apk/debug/app-debug.apk
