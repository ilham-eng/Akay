name: Build 3D HTML5 Game
on: [push]
jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Cordova
      run: npm install -g cordova
    
    - name: Create 3D Game Directory Structure
      run: |
        cordova create my3dgame com.example.my3dgame "3D Space Game"
        cd my3dgame
        
        # Create the HTML file using a separate script
        cat > create_game.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>3D Space Game</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            background: #000; 
            overflow: hidden; 
            font-family: 'Arial', sans-serif;
            touch-action: none;
        }
        
        #splashScreen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #0d1117 0%, #161b22 100%);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            transition: opacity 0.5s ease;
        }
        
        .github-logo {
            width: 120px;
            height: 120px;
            background: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 30px;
            animation: pulse 2s infinite;
        }
        
        .github-logo::before {
            content: "";
            width: 80px;
            height: 80px;
            background: 
                radial-gradient(circle at 30% 30%, #000 8%, transparent 8%),
                radial-gradient(circle at 70% 30%, #000 8%, transparent 8%),
                linear-gradient(#000 40%, transparent 40%);
            background-size: 100% 100%;
            background-repeat: no-repeat;
        }
        
        #loadingText {
            color: #f0f6fc;
            font-size: 20px;
            margin-bottom: 25px;
            text-align: center;
        }
        
        #startButton {
            background: #238636;
            color: white;
            border: none;
            padding: 14px 35px;
            font-size: 18px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: bold;
        }
        
        #startButton:hover {
            background: #2ea043;
            transform: translateY(-2px);
        }
        
        #gameContainer {
            display: none;
            position: relative;
            width: 100%;
            height: 100vh;
        }
        
        #gameCanvas {
            display: block;
            width: 100%;
            height: 100%;
        }
        
        #ui {
            position: absolute;
            top: 15px;
            left: 15px;
            color: #58a6ff;
            font-size: 18px;
            z-index: 10;
            background: rgba(13, 17, 23, 0.8);
            padding: 10px 15px;
            border-radius: 8px;
            border: 1px solid #30363d;
        }
        
        #gameOverScreen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.85);
            display: none;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 20;
            color: white;
        }
        
        .game-over-title {
            font-size: 42px;
            color: #ff6b6b;
            margin-bottom: 20px;
            font-weight: bold;
        }
        
        .game-over-score {
            font-size: 28px;
            margin-bottom: 30px;
            color: #58a6ff;
        }
        
        .restart-button {
            background: #238636;
            color: white;
            border: none;
            padding: 15px 40px;
            font-size: 20px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .restart-button:hover {
            background: #2ea043;
            transform: scale(1.05);
        }
        
        @keyframes pulse {
            0% { transform: scale(1); opacity: 0.8; }
            50% { transform: scale(1.1); opacity: 1; }
            100% { transform: scale(1); opacity: 0.8; }
        }
    </style>
</head>
<body>
    <div id="splashScreen">
        <div class="github-logo"></div>
        <div id="loadingText">3D Space Game<br><small>Powered by GitHub</small></div>
        <button id="startButton">Launch Game</button>
    </div>
    
    <div id="gameContainer">
        <canvas id="gameCanvas"></canvas>
        <div id="ui">
            <div>Score: <span id="score">0</span></div>
            <div>Lives: <span id="lives">3</span></div>
            <div>Level: <span id="level">1</span></div>
        </div>
        <div id="gameOverScreen">
            <div class="game-over-title">MISSION FAILED</div>
            <div class="game-over-score">Final Score: <span id="finalScore">0</span></div>
            <button class="restart-button">Try Again</button>
        </div>
    </div>

    <script>
        // Game State
        const gameState = {
            score: 0,
            lives: 3,
            level: 1,
            gameOver: false,
            player: {
                x: 0,
                y: 0,
                size: 25,
                speed: 8,
                color: '#58a6ff'
            },
            enemies: [],
            particles: [],
            stars: [],
            lastEnemySpawn: 0,
            enemySpawnRate: 2000
        };

        // DOM Elements
        const splashScreen = document.getElementById('splashScreen');
        const gameContainer = document.getElementById('gameContainer');
        const startButton = document.getElementById('startButton');
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const gameOverScreen = document.getElementById('gameOverScreen');
        const restartButton = document.querySelector('.restart-button');

        // Initialize Game
        function initGame() {
            setupCanvas();
            setupEventListeners();
            resetGame();
            gameLoop();
        }

        // Setup Canvas
        function setupCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            gameState.player.x = canvas.width / 2;
            gameState.player.y = canvas.height - 100;
        }

        // Setup Event Listeners
        function setupEventListeners() {
            startButton.addEventListener('click', startGame);
            restartButton.addEventListener('click', restartGame);
            canvas.addEventListener('touchmove', handleTouchMove);
            canvas.addEventListener('touchstart', handleTouchStart);
            canvas.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('keydown', handleKeyDown);
            window.addEventListener('resize', handleResize);
        }

        // Start Game
        function startGame() {
            splashScreen.style.opacity = '0';
            setTimeout(() => {
                splashScreen.style.display = 'none';
                gameContainer.style.display = 'block';
                initGame();
            }, 500);
        }

        // Reset Game State
        function resetGame() {
            gameState.score = 0;
            gameState.lives = 3;
            gameState.level = 1;
            gameState.gameOver = false;
            gameState.enemies = [];
            gameState.particles = [];
            gameState.stars = [];
            gameState.lastEnemySpawn = Date.now();
            
            gameState.player.x = canvas.width / 2;
            gameState.player.y = canvas.height - 100;
            
            updateUI();
            createStars();
            gameOverScreen.style.display = 'none';
        }

        // Restart Game
        function restartGame() {
            resetGame();
            gameLoop();
        }

        // Create Background Stars
        function createStars() {
            for (let i = 0; i < 150; i++) {
                gameState.stars.push({
                    x: Math.random() * canvas.width,
                    y: Math.random() * canvas.height,
                    size: Math.random() * 2 + 0.5,
                    speed: Math.random() * 3 + 1,
                    brightness: Math.random() * 0.8 + 0.2
                });
            }
        }

        // Create Enemy
        function createEnemy() {
            const size = Math.random() * 25 + 20;
            const speed = Math.random() * 2 + 1 + gameState.level * 0.5;
            
            gameState.enemies.push({
                x: Math.random() * (canvas.width - size),
                y: -size,
                size: size,
                speed: speed,
                color: `hsl(${Math.random() * 60}, 80%, 50%)`,
                rotation: Math.random() * Math.PI * 2,
                rotationSpeed: (Math.random() - 0.5) * 0.1
            });
        }

        // Create Particles
        function createParticles(x, y, color, count) {
            for (let i = 0; i < count; i++) {
                const angle = Math.random() * Math.PI * 2;
                const speed = Math.random() * 3 + 1;
                
                gameState.particles.push({
                    x: x,
                    y: y,
                    size: Math.random() * 4 + 2,
                    speedX: Math.cos(angle) * speed,
                    speedY: Math.sin(angle) * speed,
                    color: color,
                    life: 30,
                    decay: Math.random() * 0.1 + 0.05
                });
            }
        }

        // Update Game State
        function update() {
            if (gameState.gameOver) return;

            const currentTime = Date.now();
            
            // Spawn enemies
            if (currentTime - gameState.lastEnemySpawn > gameState.enemySpawnRate) {
                createEnemy();
                gameState.lastEnemySpawn = currentTime;
                
                // Increase difficulty
                if (gameState.score > gameState.level * 1000) {
                    gameState.level++;
                    gameState.enemySpawnRate = Math.max(500, 2000 - gameState.level * 200);
                    updateUI();
                }
            }

            // Update stars
            gameState.stars.forEach(star => {
                star.y += star.speed;
                if (star.y > canvas.height) {
                    star.y = 0;
                    star.x = Math.random() * canvas.width;
                }
            });

            // Update enemies
            gameState.enemies.forEach((enemy, index) => {
                enemy.y += enemy.speed;
                enemy.rotation += enemy.rotationSpeed;

                // Collision detection
                const dx = enemy.x + enemy.size / 2 - gameState.player.x;
                const dy = enemy.y + enemy.size / 2 - gameState.player.y;
                const distance = Math.sqrt(dx * dx + dy * dy);

                if (distance < enemy.size / 2 + gameState.player.size / 2) {
                    createParticles(enemy.x + enemy.size / 2, enemy.y + enemy.size / 2, '#ff6b6b', 15);
                    gameState.enemies.splice(index, 1);
                    gameState.lives--;
                    updateUI();

                    if (gameState.lives <= 0) {
                        gameOver();
                    }
                }
                else if (enemy.y > canvas.height + enemy.size) {
                    gameState.enemies.splice(index, 1);
                    gameState.score += 50;
                    updateUI();
                }
            });

            // Update particles
            gameState.particles.forEach((particle, index) => {
                particle.x += particle.speedX;
                particle.y += particle.speedY;
                particle.life -= particle.decay;
                particle.size *= 0.95;

                if (particle.life <= 0) {
                    gameState.particles.splice(index, 1);
                }
            });
        }

        // Draw Game
        function draw() {
            ctx.fillStyle = '#0d1117';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            drawStars();
            drawParticles();
            drawEnemies();
            drawPlayer();
        }

        // Draw Stars
        function drawStars() {
            gameState.stars.forEach(star => {
                ctx.fillStyle = `rgba(255, 255, 255, ${star.brightness})`;
                ctx.beginPath();
                ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);
                ctx.fill();
            });
        }

        // Draw Player
        function drawPlayer() {
            const p = gameState.player;
            
            ctx.fillStyle = p.color;
            ctx.beginPath();
            ctx.moveTo(p.x, p.y - p.size);
            ctx.lineTo(p.x - p.size, p.y + p.size);
            ctx.lineTo(p.x + p.size, p.y + p.size);
            ctx.closePath();
            ctx.fill();

            ctx.fillStyle = '#c9d1d9';
            ctx.beginPath();
            ctx.arc(p.x, p.y - p.size / 3, p.size / 3, 0, Math.PI * 2);
            ctx.fill();

            const gradient = ctx.createRadialGradient(
                p.x, p.y + p.size, 0,
                p.x, p.y + p.size, p.size
            );
            gradient.addColorStop(0, '#ffd700');
            gradient.addColorStop(0.5, '#ff6b6b');
            gradient.addColorStop(1, 'transparent');
            
            ctx.fillStyle = gradient;
            ctx.beginPath();
            ctx.arc(p.x, p.y + p.size, p.size / 2, 0, Math.PI * 2);
            ctx.fill();
        }

        // Draw Enemies
        function drawEnemies() {
            gameState.enemies.forEach(enemy => {
                ctx.save();
                ctx.translate(enemy.x + enemy.size / 2, enemy.y + enemy.size / 2);
                ctx.rotate(enemy.rotation);

                ctx.fillStyle = enemy.color;
                ctx.beginPath();
                for (let i = 0; i < 8; i++) {
                    const angle = (i / 8) * Math.PI * 2;
                    const radius = enemy.size / 2 * (0.7 + Math.sin(angle * 5) * 0.3);
                    const x = Math.cos(angle) * radius;
                    const y = Math.sin(angle) * radius;
                    
                    if (i === 0) ctx.moveTo(x, y);
                    else ctx.lineTo(x, y);
                }
                ctx.closePath();
                ctx.fill();

                ctx.fillStyle = 'rgba(0, 0, 0, 0.4)';
                ctx.beginPath();
                ctx.arc(-enemy.size / 4, -enemy.size / 6, enemy.size / 8, 0, Math.PI * 2);
                ctx.fill();

                ctx.restore();
            });
        }

        // Draw Particles
        function drawParticles() {
            gameState.particles.forEach(particle => {
                ctx.save();
                ctx.globalAlpha = particle.life / 30;
                ctx.fillStyle = particle.color;
                ctx.beginPath();
                ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
                ctx.fill();
                ctx.restore();
            });
        }

        // Game Over
        function gameOver() {
            gameState.gameOver = true;
            document.getElementById('finalScore').textContent = gameState.score;
            gameOverScreen.style.display = 'flex';
        }

        // Update UI
        function updateUI() {
            document.getElementById('score').textContent = gameState.score;
            document.getElementById('lives').textContent = gameState.lives;
            document.getElementById('level').textContent = gameState.level;
        }

        // Game Loop
        function gameLoop() {
            update();
            draw();
            if (!gameState.gameOver) {
                requestAnimationFrame(gameLoop);
            }
        }

        // Event Handlers
        function handleTouchMove(e) {
            e.preventDefault();
            if (gameState.gameOver) return;
            
            const touch = e.touches[0];
            const rect = canvas.getBoundingClientRect();
            gameState.player.x = touch.clientX - rect.left;
            clampPlayerPosition();
        }

        function handleTouchStart(e) {
            e.preventDefault();
        }

        function handleMouseMove(e) {
            if (gameState.gameOver) return;
            
            const rect = canvas.getBoundingClientRect();
            gameState.player.x = e.clientX - rect.left;
            clampPlayerPosition();
        }

        function handleKeyDown(e) {
            if (gameState.gameOver && e.key === ' ') {
                restartGame();
            }
        }

        function handleResize() {
            setupCanvas();
        }

        function clampPlayerPosition() {
            const halfSize = gameState.player.size;
            gameState.player.x = Math.max(halfSize, Math.min(canvas.width - halfSize, gameState.player.x));
        }
    </script>
</body>
</html>
EOF

        # Move the created HTML to the www directory
        mv create_game.html www/index.html
        echo "✅ 3D Game HTML created successfully!"
    
    - name: Build 3D Game APK
      run: |
        cd my3dgame
        cordova platform add android
        cordova build android --debug
        echo "✅ 3D Game APK built successfully!"
        find . -name "*.apk" -type f
    
    - name: Upload 3D Game APK
      uses: actions/upload-artifact@v4
      with:
        name: 3d-space-game
        path: my3dgame/platforms/android/app/build/outputs/apk/debug/app-debug.apk
