name: Build 3D HTML5 Game
on: [push]
jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Cordova
      run: npm install -g cordova
    
    - name: Create 3D Game Directory Structure
      run: |
        cordova create my3dgame com.example.my3dgame "3D Space Game"
        cd my3dgame
        
        # Create base64 encoded GitHub logo (simple SVG)
        cat > logo.svg << 'EOF'
<svg width="96" height="96" viewBox="0 0 96 96" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M48 0C21.5 0 0 21.5 0 48C0 69.5 9.5 87.8 22.6 96C24.3 96.3 25.2 95.2 25.2 94.3C25.2 93.4 25.2 89.8 25.2 85.7C25.2 82.2 23.8 80.5 23.1 79.8C28.5 78.8 30.7 76.6 31.5 75.3C32.1 74.1 33.3 72 35.2 71.2C36.8 70.5 38.8 68.8 38.8 61.7C38.8 57.5 37.5 54.3 35.8 52.2C36.3 51.5 37.1 49.3 37.1 45.6C37.1 42.8 36.5 40.8 35.4 39.3C39.8 39.3 43.9 41.1 46.3 44.2C47.5 44.2 48.8 43.8 50.3 43.3C51.8 42.8 53.3 42.5 54.7 42.5C56.1 42.5 57.6 42.8 59.1 43.3C60.6 43.8 61.9 44.2 63.1 44.2C65.5 41.1 69.6 39.3 74 39.3C72.9 40.8 72.3 42.8 72.3 45.6C72.3 49.3 73.1 51.5 73.6 52.2C71.9 54.3 70.6 57.5 70.6 61.7C70.6 68.8 72.6 70.5 74.2 71.2C76.1 72 77.3 74.1 77.9 75.3C78.7 76.6 80.9 78.8 86.3 79.8C87.6 80.5 88.2 81.8 88.2 83.7C88.2 86.8 88.2 89.3 88.2 94.3C88.2 95.2 89.1 96.3 90.8 96C103.9 87.8 113.5 69.5 113.5 48C113.5 21.5 91.5 0 48 0Z" fill="white"/>
</svg>
EOF

        # Convert SVG to base64
        LOGO_BASE64=$(base64 -w 0 logo.svg)
        GITHUB_LOGO="data:image/svg+xml;base64,$LOGO_BASE64"
        
        # Create the HTML file
        cat > www/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>3D Space Game</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            background: #000; 
            overflow: hidden; 
            font-family: 'Arial', sans-serif;
            touch-action: none;
        }
        
        #splashScreen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #0d1117 0%, #161b22 100%);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            transition: opacity 0.5s ease;
        }
        
        .github-logo {
            width: 120px;
            height: 120px;
            margin-bottom: 30px;
            animation: pulse 2s infinite;
        }
        
        #loadingText {
            color: #f0f6fc;
            font-size: 20px;
            margin-bottom: 25px;
            text-align: center;
        }
        
        #startButton {
            background: #238636;
            color: white;
            border: none;
            padding: 14px 35px;
            font-size: 18px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: bold;
        }
        
        #gameContainer {
            display: none;
            position: relative;
            width: 100%;
            height: 100vh;
        }
        
        #gameCanvas {
            display: block;
            width: 100%;
            height: 100%;
        }
        
        #ui {
            position: absolute;
            top: 15px;
            left: 15px;
            color: #58a6ff;
            font-size: 18px;
            z-index: 10;
            background: rgba(13, 17, 23, 0.8);
            padding: 10px 15px;
            border-radius: 8px;
            border: 1px solid #30363d;
        }
        
        #gameOverScreen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.85);
            display: none;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 20;
            color: white;
        }
        
        .game-over-title {
            font-size: 42px;
            color: #ff6b6b;
            margin-bottom: 20px;
            font-weight: bold;
        }
        
        .game-over-score {
            font-size: 28px;
            margin-bottom: 30px;
            color: #58a6ff;
        }
        
        .restart-button {
            background: #238636;
            color: white;
            border: none;
            padding: 15px 40px;
            font-size: 20px;
            border-radius: 8px;
            cursor: pointer;
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
    </style>
</head>
<body>
    <div id="splashScreen">
        <img class="github-logo" src="$GITHUB_LOGO" alt="GitHub Logo">
        <div id="loadingText">3D Space Game<br><small>Powered by GitHub</small></div>
        <button id="startButton">Launch Game</button>
    </div>
    
    <div id="gameContainer">
        <canvas id="gameCanvas"></canvas>
        <div id="ui">
            <div>Score: <span id="score">0</span></div>
            <div>Lives: <span id="lives">3</span></div>
        </div>
        <div id="gameOverScreen">
            <div class="game-over-title">GAME OVER</div>
            <div class="game-over-score">Score: <span id="finalScore">0</span></div>
            <button class="restart-button">Play Again</button>
        </div>
    </div>

    <script>
        // Game State
        const gameState = {
            score: 0,
            lives: 3,
            gameOver: false,
            player: { x: 0, y: 0, size: 25, speed: 8, color: '#58a6ff' },
            enemies: [],
            particles: [],
            stars: []
        };

        // DOM Elements
        const splashScreen = document.getElementById('splashScreen');
        const gameContainer = document.getElementById('gameContainer');
        const startButton = document.getElementById('startButton');
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const gameOverScreen = document.getElementById('gameOverScreen');
        const restartButton = document.querySelector('.restart-button');

        // Initialize Game
        function initGame() {
            setupCanvas();
            setupEventListeners();
            resetGame();
            gameLoop();
        }

        function setupCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            gameState.player.x = canvas.width / 2;
            gameState.player.y = canvas.height - 100;
        }

        function setupEventListeners() {
            startButton.addEventListener('click', startGame);
            restartButton.addEventListener('click', restartGame);
            canvas.addEventListener('touchmove', handleTouchMove);
            canvas.addEventListener('mousemove', handleMouseMove);
            window.addEventListener('resize', handleResize);
        }

        function startGame() {
            splashScreen.style.opacity = '0';
            setTimeout(() => {
                splashScreen.style.display = 'none';
                gameContainer.style.display = 'block';
                initGame();
            }, 500);
        }

        function resetGame() {
            gameState.score = 0;
            gameState.lives = 3;
            gameState.gameOver = false;
            gameState.enemies = [];
            gameState.particles = [];
            gameState.stars = [];
            gameState.player.x = canvas.width / 2;
            updateUI();
            createStars();
            gameOverScreen.style.display = 'none';
        }

        function restartGame() {
            resetGame();
            gameLoop();
        }

        function createStars() {
            for (let i = 0; i < 100; i++) {
                gameState.stars.push({
                    x: Math.random() * canvas.width,
                    y: Math.random() * canvas.height,
                    size: Math.random() * 2 + 0.5,
                    speed: Math.random() * 2 + 0.5
                });
            }
        }

        function createEnemy() {
            const size = Math.random() * 30 + 20;
            gameState.enemies.push({
                x: Math.random() * (canvas.width - size),
                y: -size,
                size: size,
                speed: Math.random() * 3 + 1,
                color: `hsl(${Math.random() * 60}, 100%, 50%)`,
                rotation: 0,
                rotationSpeed: (Math.random() - 0.5) * 0.05
            });
        }

        function createParticles(x, y, color, count) {
            for (let i = 0; i < count; i++) {
                gameState.particles.push({
                    x: x, y: y,
                    size: Math.random() * 3 + 1,
                    speedX: Math.random() * 4 - 2,
                    speedY: Math.random() * 4 - 2,
                    color: color,
                    life: 20
                });
            }
        }

        function update() {
            if (gameState.gameOver) return;

            // Update stars
            gameState.stars.forEach(star => {
                star.y += star.speed;
                if (star.y > canvas.height) star.y = 0;
            });

            // Update enemies
            gameState.enemies.forEach((enemy, index) => {
                enemy.y += enemy.speed;
                enemy.rotation += enemy.rotationSpeed;

                // Collision detection
                const dx = enemy.x + enemy.size/2 - gameState.player.x;
                const dy = enemy.y + enemy.size/2 - gameState.player.y;
                const distance = Math.sqrt(dx * dx + dy * dy);

                if (distance < enemy.size/2 + gameState.player.size/2) {
                    createParticles(enemy.x + enemy.size/2, enemy.y + enemy.size/2, '#ff6b6b', 10);
                    gameState.enemies.splice(index, 1);
                    gameState.lives--;
                    updateUI();
                    if (gameState.lives <= 0) gameOver();
                }
                else if (enemy.y > canvas.height) {
                    gameState.enemies.splice(index, 1);
                    gameState.score += 10;
                    updateUI();
                }
            });

            // Update particles
            gameState.particles.forEach((particle, index) => {
                particle.x += particle.speedX;
                particle.y += particle.speedY;
                particle.life--;
                if (particle.life <= 0) gameState.particles.splice(index, 1);
            });

            // Create new enemies
            if (Math.random() < 0.02) createEnemy();
        }

        function draw() {
            // Clear canvas
            ctx.fillStyle = '#0d1117';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Draw stars
            ctx.fillStyle = 'white';
            gameState.stars.forEach(star => {
                ctx.beginPath();
                ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);
                ctx.fill();
            });

            // Draw particles
            gameState.particles.forEach(particle => {
                ctx.save();
                ctx.globalAlpha = particle.life / 20;
                ctx.fillStyle = particle.color;
                ctx.beginPath();
                ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
                ctx.fill();
                ctx.restore();
            });

            // Draw enemies
            gameState.enemies.forEach(enemy => {
                ctx.save();
                ctx.translate(enemy.x + enemy.size/2, enemy.y + enemy.size/2);
                ctx.rotate(enemy.rotation);
                ctx.fillStyle = enemy.color;
                ctx.beginPath();
                for (let i = 0; i < 6; i++) {
                    const angle = (i / 6) * Math.PI * 2;
                    const radius = enemy.size/2 * (0.8 + Math.sin(angle * 3) * 0.2);
                    const x = Math.cos(angle) * radius;
                    const y = Math.sin(angle) * radius;
                    if (i === 0) ctx.moveTo(x, y);
                    else ctx.lineTo(x, y);
                }
                ctx.closePath();
                ctx.fill();
                ctx.restore();
            });

            // Draw player
            const p = gameState.player;
            ctx.fillStyle = p.color;
            ctx.beginPath();
            ctx.moveTo(p.x, p.y - p.size);
            ctx.lineTo(p.x - p.size, p.y + p.size);
            ctx.lineTo(p.x + p.size, p.y + p.size);
            ctx.closePath();
            ctx.fill();

            // Game over screen
            if (gameState.gameOver) {
                gameOverScreen.style.display = 'flex';
            }
        }

        function gameOver() {
            gameState.gameOver = true;
            document.getElementById('finalScore').textContent = gameState.score;
        }

        function updateUI() {
            document.getElementById('score').textContent = gameState.score;
            document.getElementById('lives').textContent = gameState.lives;
        }

        function gameLoop() {
            update();
            draw();
            if (!gameState.gameOver) requestAnimationFrame(gameLoop);
        }

        function handleTouchMove(e) {
            e.preventDefault();
            if (gameState.gameOver) return;
            const touch = e.touches[0];
            const rect = canvas.getBoundingClientRect();
            gameState.player.x = touch.clientX - rect.left;
            clampPlayerPosition();
        }

        function handleMouseMove(e) {
            if (gameState.gameOver) return;
            const rect = canvas.getBoundingClientRect();
            gameState.player.x = e.clientX - rect.left;
            clampPlayerPosition();
        }

        function handleResize() {
            setupCanvas();
        }

        function clampPlayerPosition() {
            const halfSize = gameState.player.size;
            gameState.player.x = Math.max(halfSize, Math.min(canvas.width - halfSize, gameState.player.x));
        }
    </script>
</body>
</html>
EOF

        echo "✅ 3D Game created successfully!"
    
    - name: Build 3D Game APK
      run: |
        cd my3dgame
        cordova platform add android
        cordova build android --debug
        echo "✅ 3D Game APK built successfully!"
        find . -name "*.apk" -type f
    
    - name: Upload 3D Game APK
      uses: actions/upload-artifact@v4
      with:
        name: 3d-space-game
        path: my3dgame/platforms/android/app/build/outputs/apk/debug/app-debug.apk
